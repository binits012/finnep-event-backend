"use strict";exports.id=789,exports.ids=[789],exports.modules={82789:(e,n,t)=>{t.d(n,{fromIni:()=>f});var o=t(3054),r=t(18112);const s=e=>"string"==typeof e.source_profile&&void 0===e.credential_source,i=e=>"string"==typeof e.credential_source&&void 0===e.source_profile,a=async(e,n,s,i={})=>{s.logger?.debug("@aws-sdk/credential-provider-ini","resolveAssumeRoleCredentials (STS)");const a=n[e];if(!s.roleAssumer){const{getDefaultRoleAssumer:e}=await Promise.all([t.e(800),t.e(348)]).then(t.bind(t,2348));s.roleAssumer=e({...s.clientConfig,credentialProviderLogger:s.logger,parentClientConfig:s?.parentClientConfig},s.clientPlugins)}const{source_profile:l}=a;if(l&&l in i)throw new r.C1(`Detected a cycle attempting to resolve credentials for profile ${(0,o.Bz)(s)}. Profiles visited: `+Object.keys(i).join(", "),!1);const d=l?c(l,n,s,{...i,[l]:!0}):(await((e,n)=>{const o={EcsContainer:e=>t.e(897).then(t.bind(t,47897)).then((({fromContainerMetadata:n})=>n(e))),Ec2InstanceMetadata:e=>t.e(897).then(t.bind(t,47897)).then((({fromInstanceMetadata:n})=>n(e))),Environment:e=>t.e(904).then(t.bind(t,80904)).then((({fromEnv:n})=>n(e)))};if(e in o)return o[e];throw new r.C1(`Unsupported credential source in profile ${n}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`)})(a.credential_source,e)(s))(),f={RoleArn:a.role_arn,RoleSessionName:a.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:a.external_id,DurationSeconds:parseInt(a.duration_seconds||"3600",10)},{mfa_serial:_}=a;if(_){if(!s.mfaCodeProvider)throw new r.C1(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,!1);f.SerialNumber=_,f.TokenCode=await s.mfaCodeProvider(_)}const g=await d;return s.roleAssumer(g,f)},l=e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.aws_access_key_id&&"string"==typeof e.aws_secret_access_key&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1,d=(e,n)=>(n?.logger?.debug("@aws-sdk/credential-provider-ini","resolveStaticCredentials"),Promise.resolve({accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,credentialScope:e.aws_credential_scope})),c=async(e,n,o,c={})=>{const f=n[e];if(Object.keys(c).length>0&&l(f))return d(f,o);if(_=f,Boolean(_)&&"object"==typeof _&&"string"==typeof _.role_arn&&["undefined","string"].indexOf(typeof _.role_session_name)>-1&&["undefined","string"].indexOf(typeof _.external_id)>-1&&["undefined","string"].indexOf(typeof _.mfa_serial)>-1&&(s(_)||i(_)))return a(e,n,o,c);var _;if(l(f))return d(f,o);if((e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.web_identity_token_file&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1)(f))return(async(e,n)=>t.e(819).then(t.bind(t,57819)).then((({fromTokenFile:t})=>t({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:n.roleAssumerWithWebIdentity,logger:n.logger,parentClientConfig:n.parentClientConfig})())))(f,o);if((e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.credential_process)(f))return(async(e,n)=>t.e(109).then(t.bind(t,65109)).then((({fromProcess:t})=>t({...e,profile:n})())))(o,e);if((e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name))(f))return await(async(e,n={})=>{const{fromSSO:o}=await t.e(791).then(t.bind(t,19791));return o({profile:e,logger:n.logger})()})(e,o);throw new r.C1(`Profile ${e} could not be found or parsed in shared credentials file.`)},f=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-ini","fromIni");const n=await(0,o.YU)(e);return c((0,o.Bz)(e),n,e)}}};